library(spatstat)
################################################# define the network
x=c(0,2,2,3,4,4,5,5,4.7,4,1.5,2,2,4,4,5)
y=c(1,0.8,1,0.4,0,0.4,0.4,1.2,1,1,4,4,5,5,4,4)
M=matrix(FALSE,nrow=16,ncol = 16)
col1=c(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)
col2=c(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)
col3=c(1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0)
col4=c(0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0)
col5=c(0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0)
col6=c(0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0)
col7=c(0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0)
col8=c(0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0)
col9=c(0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0)
col10=c(0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0)
col11=c(0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0)
col12=c(0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0)
col13=c(0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0)
col14=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0)
col15=c(0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1)
col16=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0)
M1=cbind(col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col16)
for(i in 1:16){
for(j in 1:16){
if (M1[i,j]==1){M[i,j]<- TRUE}
}
}
vertices=ppp(x,y,window = owin(c(-0.01,5.1),c(-0.01,5.1)))
N=linnet(vertices,M)
##################################################################################
X <- rpoislpp(function(x,y){3*exp(-0.1*x)}, N)
plot(X,pch=20)
ox=X$data$x
oy=X$data$y
##################################################################################
d=crossdist.lpp(X,X)    #compute the distance between the observed data (Numerator)
min=rep(0,0)
for (i in 1:length(d[,1])){
min[i]=min(d[,i][d[,i]>0])
}
bw=max(min)+1   #bandwidth
partition=min(d[d>0])
t=seq(0.01,bw,by=partition)
t=c(t,bw)
ourvalues=rep(0,0) #define the vacant vector to save the densities per points
time1=proc.time()
for(i in 1:length(d[1,])){
distco=d[,i]
dens=0
for(j in 1:length(distco)){
if(distco[j]<=bw & distco[j]!=0){
den=0
for(k in 1:length(t) ){den=den+(3/(4*bw))*(1-((t[k]/bw)^2))*(lineardisc(N,c(ox[j],oy[j]),t[k])$endpoints$n)*partition}
dens=dens+((3/(4*bw))*(1-((distco[j]/bw)^2))/den)
}
}
ourvalues[i]=dens
}
time2=proc.time()
f=function(x,y){3*exp(-0.1*x)}
realintensity=f(ox,oy)
time3=proc.time()
sigma=bw
kernel = "gaussian"
continuous = FALSE
epsilon = 1e-06
verbose = TRUE
debug = FALSE
savehistory = TRUE
x=X
kernel <- match.kernel(kernel)
L <- as.linnet(x)
Llines <- as.psp(L)
linemask <- as.mask.psp(Llines)
lineimage <- as.im(linemask)
pixelcentres <- ppp(x$data$x, x$data$y, window = as.rectangle(linemask),
check = FALSE)
pixdf <- data.frame(x$data$x, x$data$y)
p2s <- project2segment(pixelcentres, Llines)
projloc <- as.data.frame(p2s$Xproj)
projmap <- as.data.frame(p2s[c("mapXY", "tp")])
projdata <- cbind(pixdf, projloc, projmap)
values <- rep(0, nrow(pixdf))
n <- npoints(x)
seg <- x$data$seg
tp <- x$data$tp
Llengths <- lengths.psp(Llines)
stack <- data.frame(seg = integer(0), from = logical(0),
distance = numeric(0), weight = numeric(0))
for (i in seq_len(n)) {
segi <- seg[i]
tpi <- tp[i]
len <- Llengths[segi]
relevant <- (projmap$mapXY == segi)
values[relevant] <- values[relevant] + dkernel(len *
(projmap$tp[relevant] - tpi), kernel, sd = 90)
stack <- rbind(data.frame(seg = c(segi, segi), from = c(TRUE,
FALSE), distance = len * c(tpi, 1 - tpi), weight = c(1,
1)), stack)
}
Lfrom <- L$from
Lto <- L$to
if (verbose)
niter <- 0
if (savehistory)
history <- data.frame(iter = integer(0), qlen = integer(0),
totmass = numeric(0), maxmass = numeric(0))
while (nrow(stack) > 0) {
if (debug)
print(stack)
masses <- with(stack, abs(weight) * pkernel(distance,
kernel = kernel, sd = sigma, lower.tail = FALSE))
totmass <- sum(masses)
maxmass <- max(masses)
if (savehistory)
history <- rbind(history, data.frame(iter = nrow(history) +
1, qlen = nrow(stack), totmass = totmass, maxmass = maxmass))
if (verbose) {
niter <- niter + 1
cat(paste("Iteration", niter, "\tStack length", nrow(stack),
"\n"))
cat(paste("Total stack mass", totmass, "\tMaximum",
maxmass, "\n"))
}
tiny <- (masses < epsilon)
if (any(tiny)) {
if (verbose) {
ntiny <- sum(tiny)
cat(paste("Removing", ntiny, "tiny", ngettext(ntiny,
"tail", "tails"), "\n"))
}
stack <- stack[!tiny, ]
}
if (nrow(stack) == 0)
break
H <- stack[1, , drop = FALSE]
stack <- stack[-1, , drop = FALSE]
Hseg <- H$seg
Hvert <- if (H$from)
Lfrom[Hseg]
else Lto[Hseg]
Hdist <- H$distance
incident <- which((Lfrom == Hvert) | (Lto == Hvert))
degree <- length(incident)
if (!continuous)
incident <- setdiff(incident, Hseg)
for (J in incident) {
lenJ <- Llengths[J]
H.is.from <- (Lfrom[J] == Hvert)
if (continuous) {
Jweight <- H$weight * (2/degree - (J == Hseg))
}
else {
Jweight <- H$weight/(degree - 1)
}
relevant <- (projmap$mapXY == J)
tp.rel <- projmap$tp[relevant]
d.rel <- lenJ * (if (H.is.from)
tp.rel
else (1 - tp.rel))
values[relevant] <- values[relevant] + Jweight *
dkernel(d.rel + Hdist, kernel = kernel, sd = sigma)
stack <- rbind(data.frame(seg = J, from = !(H.is.from),
distance = lenJ + Hdist, weight = Jweight), stack)
}
}
time4=proc.time()
##################################################
par(mfrow=c(2,1))
plot(ourvalues-realintensity,type="l")
title(main = "our estimation's error")
abline(h=0,col="red")
plot(values-realintensity,type="l")
title(main = "Okabe estimation's error")
abline(h=0,col="red")
plot(X,pch=20)
par(mfrow=c(1,1))
plot(X,pch=20)
plot(ourvalues-realintensity,type="l")
plot(ourvalues-realintensity,type="l",col="blue")
plot(ourvalues-realintensity,type="l",col="blue",ylab="Error")
abline(h=0)
points(values-realintensity,type="l",col="red")
plot(ourvalues-realintensity,type="l",col="blue",ylab="Error",ylim=c(-3,1))
abline(h=0)
points(values-realintensity,type="l",col="red")
legend(2,1,col=par("red","blue"))
legend(2,1,c("Okabe Error","Mehdi Error"),col=par("red","blue"),lty = c(1,1))
legend(2,1,c("Okabe Error","Mehdi Error"),col=par(red,blue),lty = c(1,1))
legend(2,1,c("Okabe Error","Mehdi Error"),col=par("red","blue"),lty = c(1,1))
legend(2,1,c("Okabe Error","Mehdi Error"),col=par("red","blue"),lty = c(1,1),type="l")
legend(2,1,c("Okabe Error","Mehdi Error"),col=c("red","blue"),lty = c(1,1))
bw
mean(ourvalues-realintensity)
mean(values-realintensity)
sd(ourvalues-realintensity)
sd(values-realintensity)
plot((ourvalues-realintensity)/42,type="l",col="blue")
points((values-realintensity)/42,type="l",col="red")
plot((ourvalues-realintensity)/42,type="l",col="blue",ylim=c(-0.07,0.03))
points((values-realintensity)/42,type="l",col="red")
abline(h=0)
legend(2,0.02,c("Okabe Error","Mehdi Error"),col=c("red","blue"),lty = c(1,1))
license()
setwd("~/PycharmProjects/CyclingPathAnalysis")
source('r-scripts/setup.R')
library(ggplot2)
library(lubridate)
library(dplyr)
table_bike_paths$city <- ''
table_bike_paths[table_bike_paths$id < 5000,]$city = 'MÃ¼nster'
table_bike_paths[table_bike_paths$id > 5000 & table_bike_paths$id < 6000,]$city = 'Castello'
table_bike_paths[table_bike_paths$id > 6000,]$city = 'Valletta'
table_bike_paths$having_trips = FALSE
table_bike_paths[table_bike_paths$n_trips_in >0,]$having_trips <- TRUE
table_bike_paths[is.na(table_bike_paths$avg_speed_in),]$avg_speed_in <- 0
table_bike_paths[is.na(table_bike_paths$distance_in),]$distance_in <- 0
table_bike_paths[is.na(table_bike_paths$prop_cycled_distance),]$prop_cycled_distance <- 0
cycling_segments <- table_segments[table_segments$speed_geometry>5 & table_segments$speed_geometry<50,]
cycling_segments <- cycling_segments[!is.na(cycling_segments$city),]
cycling_segments[cycling_segments$city == 'Malta',]$city = 'Valletta'
cycling_segments$in_bicycle_path = 'No'
cycling_segments[!is.na(cycling_segments$distance_to_bikepath) & cycling_segments$distance_to_bikepath < 0.00025,]$in_bicycle_path = 'Yes'
ggplot(cycling_segments, aes(in_bicycle_path, speed_geometry, fill=in_bicycle_path)) +
geom_boxplot(alpha=0.7, outlier.shape = NA) +
ylab('Speed (km/h)') + xlab('') + ylim(0,40) +
labs(fill = 'In bicycle path') +
theme_bw() +
theme(legend.position = 'bottom', axis.text.x=element_blank()) +
facet_grid(. ~ city)
cycling_segments <- cycling_segments[cycling_segments$city != 'Valletta',]
ggplot(cycling_segments, aes(in_bicycle_path, speed_geometry, fill=in_bicycle_path)) +
geom_boxplot(alpha=0.7, outlier.shape = NA) +
ylab('Speed (km/h)') + xlab('') + ylim(0,40) +
labs(fill = 'In bicycle path') +
theme_bw() +
theme(legend.position = 'bottom', axis.text.x=element_blank()) +
facet_grid(. ~ city)
ggplot(cycling_segments, aes(in_bicycle_path, speed_geometry, fill=in_bicycle_path)) +
geom_boxplot(alpha=0.7, outlier.shape = NA) +
ylab('Speed (km/h)') + xlab('') + ylim(0,40) +
labs(fill = 'In bicycle path') +
coord_flip() +
theme_bw() +
theme(legend.position = 'bottom', axis.text.x=element_blank()) +
facet_grid(. ~ city)
ggplot(cycling_segments, aes(in_bicycle_path, speed_geometry, fill=in_bicycle_path)) +
geom_boxplot(alpha=0.7, outlier.shape = NA) +
ylab('Speed (km/h)') + xlab('') + ylim(0,40) +
labs(fill = 'In bicycle path') +
coord_flip() +
theme_bw() +
theme(legend.position = 'bottom', axis.text.y=element_blank()) +
facet_grid(. ~ city)
